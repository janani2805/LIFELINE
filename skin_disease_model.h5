import tkinter as tk
from tkinter import filedialog, messagebox
from PIL import Image, ImageTk
import numpy as np
import tensorflow as tf

class SkinDiseaseDetectorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Skin Disease Detector")
        
        self.model = tf.keras.models.load_model('skin_disease_model.h5')  # Load your pre-trained model

        self.image_label = tk.Label(root, text="No image selected", width=50)
        self.image_label.pack(pady=10)

        self.capture_button = tk.Button(root, text="Capture Image", command=self.capture_image)
        self.capture_button.pack(pady=5)

        self.analyze_button = tk.Button(root, text="Analyze Image", command=self.analyze_image)
        self.analyze_button.pack(pady=5)

        self.result_label = tk.Label(root, text="", wraplength=300)
        self.result_label.pack(pady=10)

        self.image_path = None

    def capture_image(self):
        self.image_path = filedialog.askopenfilename(
            title="Select an Image",
            filetypes=[("Image Files", "*.jpg;*.jpeg;*.png;*.bmp")]
        )
        if self.image_path:
            self.image_label.config(text=self.image_path)
            self.show_image()

    def show_image(self):
        img = Image.open(self.image_path)
        img.thumbnail((200, 200))  # Resize image
        self.img_tk = ImageTk.PhotoImage(img)
        self.image_label.config(image=self.img_tk)

    def analyze_image(self):
        if self.image_path:
            # Preprocess the image
            img = Image.open(self.image_path).resize((224, 224))  # Resize to model's input shape
            img_array = np.array(img) / 255.0  # Normalize the image
            img_array = np.expand_dims(img_array, axis=0)  # Add batch dimension
            
            # Make predictions
            predictions = self.model.predict(img_array)
            predicted_class = np.argmax(predictions[0])
            
            # Map predicted class to disease names (modify as per your model)
            disease_names = ["Disease A", "Disease B", "Disease C", "Disease D"]
            result = disease_names[predicted_class]
            
            self.result_label.config(text=f"Predicted Disease: {result}")
        else:
            messagebox.showwarning("Warning", "Please capture an image first.")

if __name__ == "__main__":
    root = tk.Tk()
    app = SkinDiseaseDetectorApp(root)
    root.mainloop()
